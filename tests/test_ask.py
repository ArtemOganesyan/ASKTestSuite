import db.q_users as db_tests
import db.q_quiz as db_quiz
from api.register_student import register_student_account
from api.quiz import *
from tests.test_data.registration_form import RegistrationFormEmail
from utilities.logger import get_logger as log
import pytest


class TestSample:
    def test_db_user_exist(self):
        assert db_tests.user_exist("raha.fake@gmail.com")[0]['id'] > 0

    def test_api_registration(self):
        response = register_student_account()
        assert response.status_code == 200


@pytest.mark.quiz
class TestQuiz:
    # pytest.quiz_id = None  # we will create class attribute to use it across our tests

    def test_api_db_quiz_create(self, setup):
        token = setup.json().get("token")  # get token from response generated by setup fixture
        pytest.quiz_id = create_quiz(token).json().get(
            'id')  # api call to create quiz and get id, override attribute value
        assert pytest.quiz_id == db_quiz.get_quiz_record_by_id(pytest.quiz_id)[0].get('id')  # verify
        # presence of created quiz in db

    def test_api_quiz_get_1(self, setup):
        token = setup.json().get("token")  # get token from response generated by setup fixture
        response = get_quizzes(token)
        quiz_list = response.json()  # store json object with all quizzes in a list
        self.logger.debug(f' Response code received {response.status_code}')
        result = False
        for quiz in quiz_list:
            if quiz.get('id') == pytest.quiz_id:
                result = True
        assert result

    def test_api_quiz_get2(self, setup):
        logger = log()
        logger.debug("getting authentication token")
        token = setup.json().get("token")  # get token from response generated by setup fixture
        logger.debug("getting list of quizzes/asserting response status code")
        response = get_quizzes(token)
        assert response.status_code == 200
        quiz_list = response.json()
        i = 0
        for quiz in quiz_list:
            logger.debug(f"asserting key-values of quiz id = {quiz_list[i]['id']}")
            assert isinstance(quiz_list[i]['name'], str), "name value must be string"
            assert isinstance(quiz_list[i]['questions'], list), "questions value must be list"
            assert isinstance(quiz_list[i]['totalScore'], int), "totalScore value must be int"
            assert isinstance(quiz_list[i]['passingPercentage'], int), "passingPercentage value must be int"
            assert isinstance(quiz_list[i]['showStopperQuestion'], int), "showStopperQuestion value must be int or None"
            assert isinstance(quiz_list[i]['id'], int), "id value must be int"
            assert isinstance(quiz_list[i]['createdAt'], str), "createdAt value must be str"
            assert isinstance(quiz_list[i]['updatedAt'], str), "updatedAt value must be str"
            i += 1


@pytest.mark.registration_form
class TestRegistrationEmail:

    def test_email_registration1(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.positive1.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.positive1["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.positive1["expected_result"]["message"]

    def test_email_registration2(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.positive2.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.positive2["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.positive2["expected_result"]["message"]

    def test_email_registration3(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.positive3.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.positive3["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.positive3["expected_result"]["message"]

    def test_email_registration4(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.positive4.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.positive4["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.positive4["expected_result"]["message"]

    def test_email_registration5(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.positive5.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.positive5["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.positive5["expected_result"]["message"]

    def test_email_registration6(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative1.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative1["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative1["expected_result"]["message"]

    def test_email_registration7(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative2.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative2["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative2["expected_result"]["message"]

    def test_email_registration8(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative3.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative3["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative3["expected_result"]["message"]

    def test_email_registration9(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative4.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative4["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative4["expected_result"]["message"]

    def test_email_registration10(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative5.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative5["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative5["expected_result"]["message"]

    def test_email_registration11(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative6.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative6["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative6["expected_result"]["message"]

    def test_email_registration12(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative7.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative7["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative7["expected_result"]["message"]

    def test_email_registration13(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative8.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative8["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative8["expected_result"]["message"]

    def test_email_registration14(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative9.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative9["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative9["expected_result"]["message"]

    def test_email_registration15(self):
        logger = log()
        logger.debug("sending request to register user and saving response")
        response = register_student_account(RegistrationFormEmail.negative10.get("test_data"))
        logger.debug("asserting response status code")
        assert response.status_code == RegistrationFormEmail.negative10["expected_result"]["status_code"]
        logger.debug("asserting response message")
        assert response.json().get("message") == RegistrationFormEmail.negative10["expected_result"]["message"]
